"""delete all tables

Revision ID: 7acb5cccedda
Revises: 4c6824545f06
Create Date: 2024-12-30 05:31:42.034712

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7acb5cccedda'
down_revision: Union[str, None] = '4c6824545f06'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_sections_id', table_name='sections')
    op.drop_table('sections')
    op.drop_index('ix_chapters_id', table_name='chapters')
    op.drop_table('chapters')
    op.drop_index('ix_student_behaviors_id', table_name='student_behaviors')
    op.drop_table('student_behaviors')
    op.drop_index('ix_student_progress_id', table_name='student_progress')
    op.drop_table('student_progress')
    op.drop_index('ix_student_questions_id', table_name='student_questions')
    op.drop_table('student_questions')
    op.drop_index('ix_subjects_id', table_name='subjects')
    op.drop_table('subjects')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('subjects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('subjects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='subjects_pkey'),
    sa.UniqueConstraint('name', name='subjects_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_subjects_id', 'subjects', ['id'], unique=False)
    op.create_table('student_questions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subject', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('chapter', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('section', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('question_content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('question_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ai_response', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('follow_up_questions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='student_questions_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_questions_pkey')
    )
    op.create_index('ix_student_questions_id', 'student_questions', ['id'], unique=False)
    op.create_table('student_progress',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subject', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('chapter', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('section', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mistakes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('questions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='student_progress_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_progress_pkey')
    )
    op.create_index('ix_student_progress_id', 'student_progress', ['id'], unique=False)
    op.create_table('sections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('chapter_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.id'], name='sections_chapter_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sections_pkey')
    )
    op.create_index('ix_sections_id', 'sections', ['id'], unique=False)
    op.create_table('student_behaviors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('behavior_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='student_behaviors_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_behaviors_pkey')
    )
    op.create_index('ix_student_behaviors_id', 'student_behaviors', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('ADMIN', 'TEACHER', 'STUDENT', name='userrole'), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_table('chapters',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subject_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='chapters_subject_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chapters_pkey')
    )
    op.create_index('ix_chapters_id', 'chapters', ['id'], unique=False)
    # ### end Alembic commands ###
